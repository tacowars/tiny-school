
transmit_tiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c00  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000843  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	44 d0       	rcall	.+136    	; 0xb4 <main>
  2c:	69 c0       	rjmp	.+210    	; 0x100 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <dbg_putchar>:
#include "dbg_putchar.h"

#if DBG_UART_ENABLE

void dbg_putchar(uint8_t c)
{
  30:	ff 92       	push	r15
  32:	0f 93       	push	r16
  34:	1f 93       	push	r17
  36:	df 93       	push	r29
  38:	cf 93       	push	r28
  3a:	00 d0       	rcall	.+0      	; 0x3c <__CCP__+0x8>
  3c:	00 d0       	rcall	.+0      	; 0x3e <__SP_H__>
  3e:	0f 92       	push	r0
  40:	cd b7       	in	r28, 0x3d	; 61
  42:	de b7       	in	r29, 0x3e	; 62
  44:	8d 83       	std	Y+5, r24	; 0x05
#define DBG_UART_TX_NUM_DELAY_CYCLES	((F_CPU/DBG_UART_BAUDRATE-16)/4+1)
#define DBG_UART_TX_NUM_ADD_NOP		((F_CPU/DBG_UART_BAUDRATE-16)%4)
	uint8_t sreg;
	uint16_t tmp;
	uint8_t numiter = 10;
  46:	8a e0       	ldi	r24, 0x0A	; 10
  48:	89 83       	std	Y+1, r24	; 0x01

	sreg = SREG;
  4a:	8f e5       	ldi	r24, 0x5F	; 95
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	fc 01       	movw	r30, r24
  50:	80 81       	ld	r24, Z
  52:	8a 83       	std	Y+2, r24	; 0x02
	cli();
  54:	f8 94       	cli

	asm volatile (
  56:	8d 81       	ldd	r24, Y+5	; 0x05
  58:	99 81       	ldd	r25, Y+1	; 0x01
  5a:	f9 2e       	mov	r15, r25
  5c:	e8 b3       	in	r30, 0x18	; 24
  5e:	ed 7f       	andi	r30, 0xFD	; 253
  60:	e8 bb       	out	0x18, r30	; 24
	...
  6a:	00 00       	nop
  6c:	ed ec       	ldi	r30, 0xCD	; 205
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	31 97       	sbiw	r30, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <__SREG__+0x31>
  74:	00 00       	nop
  76:	e8 b3       	in	r30, 0x18	; 24
  78:	80 fd       	sbrc	r24, 0
  7a:	e2 60       	ori	r30, 0x02	; 2
  7c:	80 ff       	sbrs	r24, 0
  7e:	ed 7f       	andi	r30, 0xFD	; 253
  80:	e8 bb       	out	0x18, r30	; 24
  82:	08 94       	sec
  84:	87 95       	ror	r24
  86:	fa 94       	dec	r15
  88:	89 f7       	brne	.-30     	; 0x6c <__SREG__+0x2d>
  8a:	8f 01       	movw	r16, r30
  8c:	1c 83       	std	Y+4, r17	; 0x04
  8e:	0b 83       	std	Y+3, r16	; 0x03
  90:	8d 83       	std	Y+5, r24	; 0x05
  92:	f9 82       	std	Y+1, r15	; 0x01
		  "M" (1<<DBG_UART_TX_PIN),
		  "i" (DBG_UART_TX_NUM_DELAY_CYCLES),
		  "1" (c),			/* data */
		  "2" (numiter)
	);
	SREG = sreg;
  94:	8f e5       	ldi	r24, 0x5F	; 95
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2a 81       	ldd	r18, Y+2	; 0x02
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
}
  9e:	0f 90       	pop	r0
  a0:	0f 90       	pop	r0
  a2:	0f 90       	pop	r0
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	08 95       	ret

000000b4 <main>:

#include "dbg_putchar.h"


int main(void)
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	0f 92       	push	r0
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	char c = 'A';
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	89 83       	std	Y+1, r24	; 0x01

	dbg_tx_init();
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	28 e3       	ldi	r18, 0x38	; 56
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	20 81       	ld	r18, Z
  ce:	22 60       	ori	r18, 0x02	; 2
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	87 e3       	ldi	r24, 0x37	; 55
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	27 e3       	ldi	r18, 0x37	; 55
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f9 01       	movw	r30, r18
  de:	20 81       	ld	r18, Z
  e0:	22 60       	ori	r18, 0x02	; 2
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x36>

	while(1) {
		dbg_putchar(c);
		if(++c > 'Z') c = 'A';
	}
  e8:	00 00       	nop
	char c = 'A';

	dbg_tx_init();

	while(1) {
		dbg_putchar(c);
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	a1 df       	rcall	.-190    	; 0x30 <dbg_putchar>
		if(++c > 'Z') c = 'A';
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	8b 35       	cpi	r24, 0x5B	; 91
  f8:	b8 f3       	brcs	.-18     	; 0xe8 <main+0x34>
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	89 83       	std	Y+1, r24	; 0x01
	}
  fe:	f5 cf       	rjmp	.-22     	; 0xea <main+0x36>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
